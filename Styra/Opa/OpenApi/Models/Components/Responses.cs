//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Styra.Opa.OpenApi.Models.Components
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Styra.Opa.OpenApi.Models.Components;
    using Styra.Opa.OpenApi.Utils;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using System;
    

    public class ResponsesType
    {
        private ResponsesType(string value) { Value = value; }

        public string Value { get; private set; }
        public static ResponsesType ResponsesSuccessfulPolicyResponse { get { return new ResponsesType("responses_SuccessfulPolicyResponse"); } }
        
        public static ResponsesType ServerError { get { return new ResponsesType("ServerError"); } }
        
        public static ResponsesType Null { get { return new ResponsesType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ResponsesType v) { return v.Value; }
        public static ResponsesType FromString(string v) {
            switch(v) {
                case "responses_SuccessfulPolicyResponse": return ResponsesSuccessfulPolicyResponse;
                case "ServerError": return ServerError;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for ResponsesType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ResponsesType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(Responses.ResponsesConverter))]
    public class Responses {
        public Responses(ResponsesType type) {
            Type = type;
        }
        public ResponsesSuccessfulPolicyResponse? ResponsesSuccessfulPolicyResponse { get; set; } 
        public Models.Components.ServerError? ServerError { get; set; } 

        public ResponsesType Type { get; set; }


        public static Responses CreateResponsesSuccessfulPolicyResponse(ResponsesSuccessfulPolicyResponse responsesSuccessfulPolicyResponse) {
            ResponsesType typ = ResponsesType.ResponsesSuccessfulPolicyResponse;

            Responses res = new Responses(typ);
            res.ResponsesSuccessfulPolicyResponse = responsesSuccessfulPolicyResponse;
            return res;
        }

        public static Responses CreateServerError(Models.Components.ServerError serverError) {
            ResponsesType typ = ResponsesType.ServerError;

            Responses res = new Responses(typ);
            res.ServerError = serverError;
            return res;
        }

        public static Responses CreateNull() {
            ResponsesType typ = ResponsesType.Null;
            return new Responses(typ);
        }

        public class ResponsesConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Responses);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();
                try
                {
                    return new Responses(ResponsesType.ResponsesSuccessfulPolicyResponse)
                    {
                        ResponsesSuccessfulPolicyResponse = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<ResponsesSuccessfulPolicyResponse>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(ResponsesSuccessfulPolicyResponse), new Responses(ResponsesType.ResponsesSuccessfulPolicyResponse), "ResponsesSuccessfulPolicyResponse"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }
            
                try
                {
                    return new Responses(ResponsesType.ServerError)
                    {
                        ServerError = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Models.Components.ServerError>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Models.Components.ServerError), new Responses(ResponsesType.ServerError), "ServerError"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }
            
                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

          
                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Responses res = (Responses)value;
                if (ResponsesType.FromString(res.Type).Equals(ResponsesType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.ResponsesSuccessfulPolicyResponse != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ResponsesSuccessfulPolicyResponse));
                    return;
                }
                if (res.ServerError != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ServerError));
                    return;
                }

            }
        }

    }

}