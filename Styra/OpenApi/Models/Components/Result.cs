
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Styra.OpenApi.Models.Components
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Styra.OpenApi.Utils;
    using System.Collections.Generic;
    using System.Numerics;
    using System;
    

    public class ResultType
    {
        private ResultType(string value) { Value = value; }

        public string Value { get; private set; }
        public static ResultType Boolean { get { return new ResultType("boolean"); } }
        
        public static ResultType Str { get { return new ResultType("str"); } }
        
        public static ResultType Number { get { return new ResultType("number"); } }
        
        public static ResultType ArrayOfany { get { return new ResultType("arrayOfany"); } }
        
        public static ResultType MapOfany { get { return new ResultType("mapOfany"); } }
        
        public static ResultType Null { get { return new ResultType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ResultType v) { return v.Value; }
        public static ResultType FromString(string v) {
            switch(v) {
                case "boolean": return Boolean;
                case "str": return Str;
                case "number": return Number;
                case "arrayOfany": return ArrayOfany;
                case "mapOfany": return MapOfany;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for ResultType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ResultType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    
/// <summary>
/// The base or virtual document referred to by the URL path. If the path is undefined, this key will be omitted.
/// </summary>
    [JsonConverter(typeof(Result.ResultConverter))]
    public class Result {
        public Result(ResultType type) {
            Type = type;
        }
        public bool? Boolean { get; set; } 
        public string? Str { get; set; } 
        public double? Number { get; set; } 
        public List<object>? ArrayOfany { get; set; } 
        public Dictionary<string, object>? MapOfany { get; set; } 

        public ResultType Type { get; set; }


        public static Result CreateBoolean(bool boolean) {
            ResultType typ = ResultType.Boolean;

            Result res = new Result(typ);
            res.Boolean = boolean;
            return res;
        }

        public static Result CreateStr(string str) {
            ResultType typ = ResultType.Str;

            Result res = new Result(typ);
            res.Str = str;
            return res;
        }

        public static Result CreateNumber(double number) {
            ResultType typ = ResultType.Number;

            Result res = new Result(typ);
            res.Number = number;
            return res;
        }

        public static Result CreateArrayOfany(List<object> arrayOfany) {
            ResultType typ = ResultType.ArrayOfany;

            Result res = new Result(typ);
            res.ArrayOfany = arrayOfany;
            return res;
        }

        public static Result CreateMapOfany(Dictionary<string, object> mapOfany) {
            ResultType typ = ResultType.MapOfany;

            Result res = new Result(typ);
            res.MapOfany = mapOfany;
            return res;
        }

        public static Result CreateNull() {
            ResultType typ = ResultType.Null;
            return new Result(typ);
        }

        public class ResultConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Result);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                } 
                try {
                    var converted = Convert.ToBoolean(json);
                    return new Result(ResultType.Boolean) {
                        Boolean = converted
                    };
                } catch (System.FormatException) {
                    // try next option
                }
                if (json[0] == '"' && json[^1] == '"'){
                    return new Result(ResultType.Str) {
                        Str = json[1..^1]
                    };
                } 
                try {
                    var converted = Convert.ToDouble(json);
                    return new Result(ResultType.Number) {
                        Number = converted
                    };
                } catch (System.FormatException) {
                    // try next option
                }
                try
                {
                    List<object>? arrayOfany = ResponseBodyDeserializer.Deserialize<List<object>>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new Result(ResultType.ArrayOfany) {
                        ArrayOfany = arrayOfany
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    Dictionary<string, object>? mapOfany = ResponseBodyDeserializer.Deserialize<Dictionary<string, object>>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new Result(ResultType.MapOfany) {
                        MapOfany = mapOfany
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Result res = (Result)value;
                if (ResultType.FromString(res.Type).Equals(ResultType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Boolean != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Boolean));
                    return;
                }
                if (res.Str != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Str));
                    return;
                }
                if (res.Number != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Number));
                    return;
                }
                if (res.ArrayOfany != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ArrayOfany));
                    return;
                }
                if (res.MapOfany != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.MapOfany));
                    return;
                }

            }
        }

    }

}